{"mappings":"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","sources":["./packages/react/dialog/src/Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs, composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { useId } from '@radix-ui/react-id';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\ntype DismissableLayerProps = React.ComponentProps<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentProps<typeof FocusScope>;\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n};\n\nconst [DialogProvider, useDialogContext] = createContext<DialogContextValue>(DIALOG_NAME);\n\ntype DialogOwnProps = {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n};\n\nconst Dialog: React.FC<DialogOwnProps> = (props) => {\n  const { children, open: openProp, defaultOpen, onOpenChange } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider triggerRef={triggerRef} contentId={useId()} open={open} onOpenChange={setOpen}>\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\nconst TRIGGER_DEFAULT_TAG = 'button';\n\ntype DialogTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogTriggerPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TRIGGER_DEFAULT_TAG,\n  DialogTriggerOwnProps\n>;\n\nconst DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const { as = TRIGGER_DEFAULT_TAG, ...triggerProps } = props;\n  const context = useDialogContext(TRIGGER_NAME);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  return (\n    <Primitive\n      type=\"button\"\n      aria-haspopup=\"dialog\"\n      aria-expanded={context.open}\n      aria-controls={context.contentId}\n      data-state={getState(context.open)}\n      {...triggerProps}\n      as={as}\n      ref={composedTriggerRef}\n      onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(true))}\n    />\n  );\n}) as DialogTriggerPrimitive;\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof DialogOverlayImpl>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype DialogOverlayPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogOverlayImpl>,\n  DialogOverlayOwnProps\n>;\n\nconst DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...overlayProps } = props;\n  const context = useDialogContext(OVERLAY_NAME);\n  return (\n    <Presence present={forceMount || context.open}>\n      <DialogOverlayImpl data-state={getState(context.open)} {...overlayProps} ref={forwardedRef} />\n    </Presence>\n  );\n}) as DialogOverlayPrimitive;\n\ntype DialogOverlayImplOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogOverlayImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  DialogOverlayImplOwnProps\n>;\n\nconst DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  return (\n    <Portal>\n      <Primitive {...props} ref={forwardedRef} />\n    </Portal>\n  );\n}) as DialogOverlayImplPrimitive;\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof DialogContentImpl>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype DialogContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogContentImpl>,\n  DialogContentOwnProps\n>;\n\nconst DialogContent = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useDialogContext(CONTENT_NAME);\n  return (\n    <Presence present={forceMount || context.open}>\n      <DialogContentImpl data-state={getState(context.open)} {...contentProps} ref={forwardedRef} />\n    </Presence>\n  );\n}) as DialogContentPrimitive;\n\ntype DialogContentImplOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    /**\n     * Event handler called when auto-focusing on open.\n     * Can be prevented.\n     */\n    onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n    /**\n     * Event handler called when auto-focusing on close.\n     * Can be prevented.\n     */\n    onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n\n    /**\n     * Event handler called when the escape key is down.\n     * Can be prevented.\n     */\n    onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n\n    /**\n     * Event handler called when the a pointer event happens outside of the `Dialog`.\n     * Can be prevented.\n     */\n    onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  }\n>;\n\ntype DialogContentImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  DialogContentImplOwnProps\n>;\n\nconst DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME);\n\n  // Make sure the whole tree has focus guards as our `Dialog` will be\n  // the last element in the DOM (beacuse of the `Portal`)\n  useFocusGuards();\n\n  // Hide everything from ARIA except the content\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n\n  return (\n    <Portal>\n      <RemoveScroll>\n        <FocusScope\n          // we make sure we're not trapping once it's been closed\n          // (closed !== unmounted when animating out)\n          trapped={context.open}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          {(focusScopeProps) => (\n            <DismissableLayer\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            >\n              {(dismissableLayerProps) => (\n                <Primitive\n                  role=\"dialog\"\n                  aria-modal\n                  id={context.contentId}\n                  {...contentProps}\n                  ref={composeRefs(\n                    forwardedRef,\n                    contentRef,\n                    focusScopeProps.ref,\n                    dismissableLayerProps.ref\n                  )}\n                  style={{\n                    ...dismissableLayerProps.style,\n                    ...contentProps.style,\n                  }}\n                  onBlurCapture={composeEventHandlers(\n                    contentProps.onBlurCapture,\n                    dismissableLayerProps.onBlurCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                  onFocusCapture={composeEventHandlers(\n                    contentProps.onFocusCapture,\n                    dismissableLayerProps.onFocusCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                  onMouseDownCapture={composeEventHandlers(\n                    contentProps.onMouseDownCapture,\n                    dismissableLayerProps.onMouseDownCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                  onTouchStartCapture={composeEventHandlers(\n                    contentProps.onTouchStartCapture,\n                    dismissableLayerProps.onTouchStartCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                />\n              )}\n            </DismissableLayer>\n          )}\n        </FocusScope>\n      </RemoveScroll>\n    </Portal>\n  );\n}) as DialogContentImplPrimitive;\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\nconst CLOSE_DEFAULT_TAG = 'button';\n\ntype DialogCloseOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogClosePrimitive = Polymorphic.ForwardRefComponent<\n  typeof CLOSE_DEFAULT_TAG,\n  DialogCloseOwnProps\n>;\n\nconst DialogClose = React.forwardRef((props, forwardedRef) => {\n  const { as = CLOSE_DEFAULT_TAG, ...closeProps } = props;\n  const context = useDialogContext(CLOSE_NAME);\n  return (\n    <Primitive\n      type=\"button\"\n      {...closeProps}\n      as={as}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n    />\n  );\n}) as DialogClosePrimitive;\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Close = DialogClose;\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogOverlay,\n  DialogContent,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Overlay,\n  Content,\n  Close,\n};\n"],"names":["DialogProvider","useDialogContext","createContext","Dialog","props","children","open","openProp","defaultOpen","onOpenChange","triggerRef","React","useRef","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","$da81f3af863821fb8a193d321c41d$var$DialogProvider","contentId","useId","displayName","TRIGGER_DEFAULT_TAG","DialogTrigger","forwardRef","forwardedRef","as","triggerProps","context","composedTriggerRef","useComposedRefs","Primitive","$da81f3af863821fb8a193d321c41d$var$_extends","type","aria-haspopup","aria-expanded","aria-controls","data-state","getState","ref","onClick","composeEventHandlers","DialogOverlay","forceMount","overlayProps","Presence","present","$da81f3af863821fb8a193d321c41d$var$DialogOverlayImpl","DialogOverlayImpl","Portal","DialogContent","contentProps","$da81f3af863821fb8a193d321c41d$var$DialogContentImpl","DialogContentImpl","onOpenAutoFocus","onCloseAutoFocus","onEscapeKeyDown","onPointerDownOutside","useFocusGuards","contentRef","useEffect","content","current","hideOthers","RemoveScroll","FocusScope","trapped","onMountAutoFocus","onUnmountAutoFocus","focusScopeProps","DismissableLayer","disableOutsidePointerEvents","onFocusOutside","event","preventDefault","onDismiss","dismissableLayerProps","role","aria-modal","id","composeRefs","style","onBlurCapture","checkForDefaultPrevented","onFocusCapture","onMouseDownCapture","onTouchStartCapture","CLOSE_DEFAULT_TAG","DialogClose","closeProps","Root","Trigger","Overlay","Content","Close"],"version":3,"file":"index.module.js.map"}