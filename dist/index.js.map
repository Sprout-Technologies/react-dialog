{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/dialog/src/Dialog.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs, composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { useId } from '@radix-ui/react-id';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\ntype DismissableLayerProps = React.ComponentProps<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentProps<typeof FocusScope>;\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n};\n\nconst [DialogProvider, useDialogContext] = createContext<DialogContextValue>(DIALOG_NAME);\n\ntype DialogOwnProps = {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n};\n\nconst Dialog: React.FC<DialogOwnProps> = (props) => {\n  const { children, open: openProp, defaultOpen, onOpenChange } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider triggerRef={triggerRef} contentId={useId()} open={open} onOpenChange={setOpen}>\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\nconst TRIGGER_DEFAULT_TAG = 'button';\n\ntype DialogTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogTriggerPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TRIGGER_DEFAULT_TAG,\n  DialogTriggerOwnProps\n>;\n\nconst DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const { as = TRIGGER_DEFAULT_TAG, ...triggerProps } = props;\n  const context = useDialogContext(TRIGGER_NAME);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  return (\n    <Primitive\n      type=\"button\"\n      aria-haspopup=\"dialog\"\n      aria-expanded={context.open}\n      aria-controls={context.contentId}\n      data-state={getState(context.open)}\n      {...triggerProps}\n      as={as}\n      ref={composedTriggerRef}\n      onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(true))}\n    />\n  );\n}) as DialogTriggerPrimitive;\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof DialogOverlayImpl>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype DialogOverlayPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogOverlayImpl>,\n  DialogOverlayOwnProps\n>;\n\nconst DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...overlayProps } = props;\n  const context = useDialogContext(OVERLAY_NAME);\n  return (\n    <Presence present={forceMount || context.open}>\n      <DialogOverlayImpl data-state={getState(context.open)} {...overlayProps} ref={forwardedRef} />\n    </Presence>\n  );\n}) as DialogOverlayPrimitive;\n\ntype DialogOverlayImplOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogOverlayImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  DialogOverlayImplOwnProps\n>;\n\nconst DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  return (\n    <Portal>\n      <Primitive {...props} ref={forwardedRef} />\n    </Portal>\n  );\n}) as DialogOverlayImplPrimitive;\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof DialogContentImpl>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype DialogContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogContentImpl>,\n  DialogContentOwnProps\n>;\n\nconst DialogContent = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useDialogContext(CONTENT_NAME);\n  return (\n    <Presence present={forceMount || context.open}>\n      <DialogContentImpl data-state={getState(context.open)} {...contentProps} ref={forwardedRef} />\n    </Presence>\n  );\n}) as DialogContentPrimitive;\n\ntype DialogContentImplOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    /**\n     * Event handler called when auto-focusing on open.\n     * Can be prevented.\n     */\n    onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n    /**\n     * Event handler called when auto-focusing on close.\n     * Can be prevented.\n     */\n    onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n\n    /**\n     * Event handler called when the escape key is down.\n     * Can be prevented.\n     */\n    onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n\n    /**\n     * Event handler called when the a pointer event happens outside of the `Dialog`.\n     * Can be prevented.\n     */\n    onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  }\n>;\n\ntype DialogContentImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  DialogContentImplOwnProps\n>;\n\nconst DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME);\n\n  // Make sure the whole tree has focus guards as our `Dialog` will be\n  // the last element in the DOM (beacuse of the `Portal`)\n  useFocusGuards();\n\n  // Hide everything from ARIA except the content\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n\n  return (\n    <Portal>\n      <RemoveScroll>\n        <FocusScope\n          // we make sure we're not trapping once it's been closed\n          // (closed !== unmounted when animating out)\n          trapped={context.open}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          {(focusScopeProps) => (\n            <DismissableLayer\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            >\n              {(dismissableLayerProps) => (\n                <Primitive\n                  role=\"dialog\"\n                  aria-modal\n                  id={context.contentId}\n                  {...contentProps}\n                  ref={composeRefs(\n                    forwardedRef,\n                    contentRef,\n                    focusScopeProps.ref,\n                    dismissableLayerProps.ref\n                  )}\n                  style={{\n                    ...dismissableLayerProps.style,\n                    ...contentProps.style,\n                  }}\n                  onBlurCapture={composeEventHandlers(\n                    contentProps.onBlurCapture,\n                    dismissableLayerProps.onBlurCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                  onFocusCapture={composeEventHandlers(\n                    contentProps.onFocusCapture,\n                    dismissableLayerProps.onFocusCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                  onMouseDownCapture={composeEventHandlers(\n                    contentProps.onMouseDownCapture,\n                    dismissableLayerProps.onMouseDownCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                  onTouchStartCapture={composeEventHandlers(\n                    contentProps.onTouchStartCapture,\n                    dismissableLayerProps.onTouchStartCapture,\n                    { checkForDefaultPrevented: false }\n                  )}\n                />\n              )}\n            </DismissableLayer>\n          )}\n        </FocusScope>\n      </RemoveScroll>\n    </Portal>\n  );\n}) as DialogContentImplPrimitive;\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\nconst CLOSE_DEFAULT_TAG = 'button';\n\ntype DialogCloseOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogClosePrimitive = Polymorphic.ForwardRefComponent<\n  typeof CLOSE_DEFAULT_TAG,\n  DialogCloseOwnProps\n>;\n\nconst DialogClose = React.forwardRef((props, forwardedRef) => {\n  const { as = CLOSE_DEFAULT_TAG, ...closeProps } = props;\n  const context = useDialogContext(CLOSE_NAME);\n  return (\n    <Primitive\n      type=\"button\"\n      {...closeProps}\n      as={as}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n    />\n  );\n}) as DialogClosePrimitive;\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Close = DialogClose;\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogOverlay,\n  DialogContent,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Overlay,\n  Content,\n  Close,\n};\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","createContext","DialogProvider","useDialogContext","Dialog","props","children","openProp","open","defaultOpen","onOpenChange","triggerRef","React","useRef","_useControllableState2","$b0496301423b3238f89fb15bee25ad02$var$_slicedToArray","useControllableState","prop","defaultProp","onChange","_useControllableState3","setOpen","_react","createElement","$b0496301423b3238f89fb15bee25ad02$var$DialogProvider","contentId","useId","displayName","DialogTrigger","forwardRef","forwardedRef","_props$as","as","triggerProps","$b0496301423b3238f89fb15bee25ad02$var$_objectWithoutProperties","context","composedTriggerRef","useComposedRefs","Primitive","$b0496301423b3238f89fb15bee25ad02$var$_extends","type","aria-haspopup","aria-expanded","aria-controls","data-state","getState","ref","onClick","composeEventHandlers","DialogOverlay","forceMount","overlayProps","Presence","present","$b0496301423b3238f89fb15bee25ad02$var$DialogOverlayImpl","DialogOverlayImpl","Portal","DialogContent","contentProps","$b0496301423b3238f89fb15bee25ad02$var$DialogContentImpl","DialogContentImpl","onOpenAutoFocus","onCloseAutoFocus","onEscapeKeyDown","onPointerDownOutside","useFocusGuards","contentRef","useEffect","content","current","hideOthers","RemoveScroll","FocusScope","trapped","onMountAutoFocus","onUnmountAutoFocus","focusScopeProps","DismissableLayer","disableOutsidePointerEvents","onFocusOutside","event","preventDefault","onDismiss","dismissableLayerProps","role","aria-modal","id","composeRefs","style","$b0496301423b3238f89fb15bee25ad02$var$_objectSpread","onBlurCapture","checkForDefaultPrevented","onFocusCapture","onMouseDownCapture","onTouchStartCapture","DialogClose","_props$as2","closeProps","Root","Trigger","Overlay","Content","Close"],"version":3,"file":"index.js.map"}